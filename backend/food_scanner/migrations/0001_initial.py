# Generated by Django 4.2.7 on 2025-08-03 06:25

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Food",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200)),
                (
                    "food_type",
                    models.CharField(
                        choices=[
                            ("packaged", "Packaged Food"),
                            ("fresh", "Fresh Food"),
                            ("prepared", "Prepared Food"),
                            ("restaurant", "Restaurant Food"),
                        ],
                        default="fresh",
                        max_length=20,
                    ),
                ),
                (
                    "category",
                    models.CharField(db_index=True, default="general", max_length=100),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, db_index=True, max_length=50, null=True, unique=True
                    ),
                ),
                ("brand", models.CharField(blank=True, max_length=100)),
                ("package_size", models.CharField(blank=True, max_length=50)),
                (
                    "calories_per_100g",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "nutri_score",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                        ],
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "glycemic_load_index",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("image_url", models.URLField(blank=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="HealthCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField()),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("mild", "Mild"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                        ],
                        default="moderate",
                        max_length=10,
                    ),
                ),
                ("dietary_restrictions", models.JSONField(default=dict)),
                ("nutritional_targets", models.JSONField(default=dict)),
                ("warning_template", models.TextField(blank=True)),
                ("recommendation_template", models.TextField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NutritionSource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("database", "Local Database"),
                            ("open_food_facts", "Open Food Facts"),
                            ("nutrition_label", "Nutrition Label (OCR)"),
                            ("ai_estimated", "AI Estimated"),
                            ("user_input", "User Input"),
                            ("manual", "Manual Entry"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                (
                    "reliability_score",
                    models.FloatField(
                        default=1.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-reliability_score", "name"],
            },
        ),
        migrations.CreateModel(
            name="ScanHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "scan_type",
                    models.CharField(
                        choices=[
                            ("image", "Image Recognition"),
                            ("barcode", "Barcode Scan"),
                            ("text", "Text Input"),
                            ("nutrition_label", "Nutrition Label OCR"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("input_data", models.TextField()),
                ("input_metadata", models.JSONField(default=dict)),
                ("health_conditions", models.JSONField(default=list)),
                ("scan_result", models.JSONField(default=dict)),
                ("confidence_score", models.FloatField(blank=True, null=True)),
                ("processing_time_ms", models.IntegerField(blank=True, null=True)),
                ("error_message", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "food",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="food_scanner.food",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="NutritionProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("serving_size", models.CharField(default="100g", max_length=50)),
                (
                    "serving_size_grams",
                    models.FloatField(
                        default=100.0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "calories",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "protein_g",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "carbohydrates_g",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "fat_g",
                    models.FloatField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "fiber_g",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "sugar_g",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "sodium_mg",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "cholesterol_mg",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "saturated_fat_g",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "trans_fat_g",
                    models.FloatField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("vitamins_minerals", models.JSONField(blank=True, default=dict)),
                (
                    "confidence_score",
                    models.FloatField(
                        default=1.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("is_primary", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("source_metadata", models.JSONField(blank=True, default=dict)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "food",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nutrition_profiles",
                        to="food_scanner.food",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="food_scanner.nutritionsource",
                    ),
                ),
            ],
            options={
                "ordering": ["-is_primary", "-confidence_score", "-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="food",
            index=models.Index(
                fields=["name", "food_type"], name="food_scanne_name_69edfe_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="food",
            index=models.Index(
                fields=["category", "food_type"], name="food_scanne_categor_a20aef_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scanhistory",
            index=models.Index(
                fields=["scan_type", "status"], name="food_scanne_scan_ty_54fc43_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="scanhistory",
            index=models.Index(
                fields=["created_at"], name="food_scanne_created_7431ad_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="nutritionprofile",
            unique_together={("food", "source", "serving_size")},
        ),
    ]
